k <- 4 # Number of outcomes4
n_simulations = 1
r <- 2  # Rank of simulated data
datas_s2_1x = simulations_data(n,p,r,k,n_simulations,case = 2,corr = 0)
Beta_matrix = datas_s2_1x$Beta_matrix
datasau = datas_s2_1x
dlong <- datasau$dlong_list[[1]]
dlong=dlong[dlong$Tstop > dlong$Tstart, ]
#construct formula for the model
predictor_names <- grep("^x", names(dlong), value = TRUE)
formula_str <- paste("Surv(Tstop, status) ~", paste(predictor_names, collapse = " + "))
formula <- as.formula(formula_str)
redrank = formula
dat=datasau$dlong_list[[1]]
nranks_fit = r
Gamma.iter<-matrix(rnorm(nranks_fit*k),nranks_fit,k)
# Using pen.survrrr function with lambdas set to 0 (which is the same as fitting an unpenalized model)
r2_pen.survrrr <- pen.survrrr(formula, dat = dlong, R = nranks_fit,
Gamma.iter = Gamma.iter, eps = 1e-5, lambda.alpha = 0, lambda.gamma =  0, standardize.opt = F)
Beta1 <- r2$Alpha %*% r2$Gamma
estimated_coefficients1 <- Beta1
true_coefficients1 <- Beta_matrix
Beta1 <- r2$Alpha %*% r2$Gamma
# Using original redrank function
r2 <- redrank(formula, data = dlong, R = nranks_fit)
Beta1 <- r2$Alpha %*% r2$Gamma
estimated_coefficients1 <- Beta1
true_coefficients1 <- Beta_matrix
mse1<- (estimated_coefficients1 - true_coefficients1)^2
mean(mse1)
Beta2 <- r2_pen.survrrr$Alpha  %*% r2_pen.survrrr$Gamma
Beta2 <- r2_pen.survrrr$Alpha  %*% r2_pen.survrrr$Gamma
estimated_coefficients2 <- Beta2
mse2<- (estimated_coefficients2 - true_coefficients2)^2
true_coefficients2 <- Beta_matrix
mse2<- (estimated_coefficients2 - true_coefficients2)^2
mean(mse2) #0.000785664(2.9e-3) 0.0007675608(2.95e-3)0.000762934(2.959e-3) 0.000761184 (2.96e-3) 0.0007612089(2.961e-3)
Beta1
Beta2
# Using pen.admm.survrrr function with lambdas set to 0 (which is the same as fitting an unpenalized model)
r2_pen.admm.survrrr <- pen.admm.survrrr(formula,  R = nranks_fit, Gamma.iter = Gamma.iter, dat = dlong,
lambda.alpha = 0, lambda.gamma = 0, overall_eps = 1e-2, gd_tol = 1e-4, res_tol = 1e-3, maxit = 1e5, standardize.opt= F,rho=10, a_eta1=8.2e-4, a_eta2=1.7e-4,g_eta1=9e-3) #lambda: 5.685e-3
################################################################################
## Penalized survRRR functions ##
################################################################################
# The functions pen.survrrr.iter and pen.survrrr go together:
# pen.survrrr.iter is a function that goes through a single iteration (estimating Alpha, estimating Gamma)
# pen.survrrr preps the data and checks if the model has converged
# If I deviate from the default arguments of an existing function (e.g. glmnet),
# I explicitly include this argument as an argument in the pen.survrrr.iter functions too, without default,
# to explicitly point this out
library(glmnet)
library(mstate)
library(survival)
################################################################################
## Arguments ##
# redrank: formula object of redrank model
# R: number of ranks
# Gamma.iter: initialization of Gamma matrix
# dat: data, in mstate long format (e.g with transition matrix as attribute)
# lambda.alpha: penalization parameter when estimating the Alpha matrix
# lambda.gamma: penalization parameter when estimating the Gamma matrix
# overall_eps: convergence criterion
# thresh: see ?glmnet (set to default value)
# maxit: see ?glmnet (set to default value)
# standardize.opt: whether predictors in glmnet should be standardized prior to fitting the model (set to False!)
# alpha: see ?glmnet (set to 1: lasso)
pen.admm.survrrr <- function(redrank, R, Gamma.iter, dat, lambda.alpha, lambda.gamma, overall_eps, gd_tol,res_tol, maxit = 1e5, standardize.opt, rho=1.0, a_eta1 = 1e-8, a_eta2=1e-8, g_eta1=1e-8){
# get transition matrix and data part from dat object
# Element (i, j) represents the probability of transitioning from state i to state j.
trans <- attr(dat, "trans")
dat <- as.data.frame(dat)
# get model matrices of reduced rank part
mmrr <- model.matrix(redrank, data=dat) #takes the formula (redrank) and the data (dat) and creates a matrix of the predictor variables with the addition  of an intercept-appropriate type to be used in fitting a model
mmrr <- mmrr[,-1,drop=FALSE] # without intercept-remove it
p <- ncol(mmrr) #number of column=number of predictors
mmrr <- data.frame(mmrr)
covs <- names(mmrr) #names of predictors-covariates
rrdata <- as.data.frame(dat[,c("id","from","to","trans","Tstart","Tstop","time","status")]) #selects columns from dat
rrdata <- cbind(rrdata,mmrr) #put together the selected columns with the models matrix of predictors
cols <- 8 + (1:p) #number of columns-selected ones plus predictors
# preparations for iterative algorithm
trans2 <- to.trans2(trans) #matrix with transitions in different format
K <- nrow(trans2) #number of events
tnames <- paste(trans2$fromname,"->",trans2$toname) #strore transition names
# add to the data set R replicates of columns with covariates Z_1...Z_p
colsR <- matrix(0,R,p) #matrix Rxp me 0
for (r in 1:R) { #to fill the matrix
ncd <- ncol(rrdata) #columns of dataset
rrdata <- cbind(rrdata,rrdata[,cols]) #add for second,..,R+1 time all the predictor columns
colsR[r,] <- ((ncd+1):(ncd+p)) #fill rows(1,..,R) of matrix with the col num of the added columns in rrdata
names(rrdata)[((ncd+1):(ncd+p))] <- paste(covs, as.character(r), sep=".rr") #change names of new added columns(add rr.{1,..,r})
}
#Step 1. in draft paper's algorithm
prev.obj.fun.train <- 0
obj.fun.train <- 100
Delta <- obj.fun.train  - prev.obj.fun.train
#Step 2. in draft paper's algorithm
a <- rep(0,p*R)  #rnorm(p*R)
d <- rep(0,p*R)
u1 <- rep(0,p*R)
t <- rep(0,R*K)
u2 <- rep(0,R*K)
a_eta=a_eta1
g_eta=g_eta1
output_file_delta <- "output_file_output_file_delta.txt"
cat("delta File:\n", file = output_file_delta)
outer_it=1
while (abs(Delta) > overall_eps){
rr <- pen.admm.survrrr.iter(rrdata=rrdata, Gamma.iter=Gamma.iter, lambda.alpha=lambda.alpha, lambda.gamma=lambda.gamma,
cols=cols, colsR=colsR, K=K, p=p, R=R, trans=trans, pred.names=covs,
gd_tol=gd_tol, res_tol=res_tol,maxit=maxit, standardize.opt = standardize.opt, rho = rho,a_eta=a_eta,g_eta=g_eta,a=a,d=d,t=t,u1=u1,u2=u2)
prev.obj.fun.train  <- obj.fun.train
obj.fun.train <- rr$obj.fun.train
Delta <-  prev.obj.fun.train - obj.fun.train
print(paste0("present value objective function: ", obj.fun.train))
print(paste0("Delta: ", Delta))
if(Delta < 0) {
print("Negative Delta. This should not happen.")
break
}else{
rrcheck <- rr}
Gamma.iter = rr$Gamma
a=as.vector(rr$Alpha)
d=rr$d
t=rr$t
u1=rep(0,p*R)#rr$u1
u2=rep(0,R*K) #rr$u2
a_eta=a_eta2
text <- sprintf("Iteration %d: Delta: %.6f", outer_it, Delta)
cat(text, "\n", file = output_file_delta, append = TRUE)
outer_it=outer_it+1
}
return(rrcheck)
}
################################################################################
## Arguments ##
# rrdata: data as prepped by pen.survrrr
# Gamma.iter: Gamma matrix of previous iteration (or initial Gamma if first iteration)
# lambda.alpha: see pen.survrrr.iter
# lambda.gamma: see pen.survrrr.iter
# cols: vector indices of first 8+p columns
# colsR: a matrix of dim R*p with the indices of the R copies of the predictors (starting at 8+p+1, directly following cols)
# K: number of outcomes
# p: number of predictors
# R: see pen.survrrr.iter
# trans: transition matrix
# pred.names: names of predictors
# thresh: see pen.survrrr.iter
# maxit: see pen.survrrr.iter
# standardize.opt: see pen.survrrr.iter
# alpha: see pen.survrrr.iter
# sqrt(sum((-ell_gradient_a(Gamma_matrix, data, Alpha_matrix)+rho*(as.vector(Alpha_matrix)-d+u))^2))
pen.admm.survrrr.iter <- function(rrdata, Gamma.iter, lambda.alpha, lambda.gamma,
cols, colsR, K, p, R, trans, pred.names,
gd_tol,res_tol, maxit, standardize.opt, rho, a_eta,g_eta,a,d,t,u1,u2){
data <- rrdata
####################### Modified Step 3
#initialize a,d,u, r1,s1,n
Gamma_matrix = Gamma.iter
Alpha_matrix = matrix(a,p,R)
r1 = 100
s1 = 100
output_file_alpha <- "output_file_alpha.txt"
cat("Alpha File:\n", file = output_file_alpha)
for (iter_i in 1:as.integer(maxit/100)) {
# while(r1>=eps2 || s1>=eps3) {
## Update a
Alpha_matrix <- update_a(Gamma_matrix, data, Alpha_matrix, d, u1, rho, a_eta, max_iter = maxit/100, gd_tol = gd_tol)
a=c(Alpha_matrix)
## Update d
d_old=d
d = u1 + a - lambda.alpha*sign(d_old)/rho
# d = u1 + a - gradient_omega1(d, L=1, lambda=lambda.alpha, p, R)/rho
## Update u1
u1 = u1 + (a-d)
# cat('a:')
# print(a)
# cat('d:')
# print(d)
##Calculate residuals
r1 = norm(a-d, type = "2")
s1 = rho * norm(d-d_old, type = "2")
text <- sprintf("Iteration %d: r1: %.6f s1: %.6f eta: %.6f rho: %.6f", iter_i, r1, s1,a_eta,rho)
cat(text, "\n", file = output_file_alpha, append = TRUE)
print(paste('ri:', r1, 's1:',s1))
if (r1  < res_tol && s1 < res_tol) {
cat("Alpha Converged: Primal and dual residuals are within tolerance\n")
break
}
# eta <- min(eta * 1.1, 1e-2)
# rho <- max(rho * 0.9, 1)
}
# while(r1>=eps2 || s1>=eps3) {
# ## Update a
#   a = ell_gradient_a(Gamma_matrix, data, Alpha_matrix)/rho + d-u
#   Alpha_matrix = matrix(a,p,R)
#
# ## Update d
#   d_old=d
#   d = u + a - gradient_omega1(d, L=1, lambda=lambda.alpha, p, R)/rho
#
# ## Update u
#   u = u + rho*(a-d)
#
#   cat('a:')
#   print(a)
#   cat('Alpha_matrix')
#   print(Alpha_matrix)
#   cat('d:')
#   print(d)
#
# ##Calculate residuals
#
#   r1 = norm((a-d), type = "2")
#   s1 = rho * norm((d-d_old), type = "2")
#
#
#   print(paste('ri:', r1, 's1:',s1))
# }
####################### Modified Step 3
#
# ################ORIGINAAAAALLLLLLLLLLLLLLLLLLLLLLLLLL step 3################--TO BE DELETED
# # Fix Gamma
# for (k in 1:K) { ### W[k,r] = Gamma.iter[r,k] * Z
#   wh <- which(data$trans == k) #indexes of trans==k
#   for (r in 1:R) {
#     data[wh, colsR[r,]] <- Gamma.iter[r,k] * data[wh, colsR[r,]]
#     #Gamma.iter:RxK matrix, colsR[r,]: row of rank==r, data[wh, colsR[r,]]: rows of trans==k and columns of rank==r
#   }
# }
#
# covs.R <- names(data)[as.vector(t(colsR))] #names of added columns(according to ranks) to data
# x <- as.matrix(data[colnames(data) %in% covs.R]) #takes from data the added columns whose values have been changed after previous iteration
#
# ty <- as.matrix(data[colnames(data) %in% c("Tstart", "Tstop", "status")]) #takes these 3 columns from data
# yss<- Surv(ty[,1], ty[,2], ty[,3])
# yss.s<- stratifySurv(yss, data$trans)
#
# # fit model
# # Solve A
# fit1 <- glmnet(x, yss.s, family = "cox", standardize = standardize.opt,
#                lambda = lambda.alpha, trace.it = T, thresh = thresh, maxit = maxit, alpha = alpha) #performing regularized survival analysis(adds penalty)
#
# # obtain coefficients Alpha-hat (pR matrix)
# coef1 <- predict(fit1, s = lambda.alpha, type = "coefficients", x = x, y = yss)
# # structure in correct dimensions(pxR)
# Alpha <- matrix(coef1[1:(p*R)],p,R)
#
# ncd <- ncol(data)
# # multiply predictor columns by Alpha, add to dataset (dimensions n * R)
# ###############ORIGINAAAAALLLLLLLLLLLLLLLLLLLLLLLLLL step 3################--TO BE DELETED
############### Modified Step 4
#initialize gamma,t,u2, r2,s2
Gamma_matrix = Gamma.iter
coef1 = a
gamma <- as.vector(Gamma_matrix) #rnorm(R*K)
r2 = 100
s2 = 100
output_file_gamma <- "output_file_gamma.txt"
cat("Gamma File:\n", file = output_file_gamma)
for (iter_i in 1:as.integer(maxit/100)) {
# while(r2>=eps4 || s2>=eps5) {
## Update gamma
Gamma_matrix <- update_gamma(Gamma_matrix, data, Alpha_matrix, t, u2, rho, g_eta, max_iter = maxit/100, gd_tol = gd_tol)
gamma = c(Gamma_matrix)
## Update t
t_old=t
t  =  gamma+u2-gradient_omega3(t, N=1, lambda=lambda.gamma, K, R)/rho
## Update u2
u2= u2 + (gamma-t)
##Calculate residuals
r2 = norm(gamma-t, type = "2")
s2 =  rho * norm(t-t_old, type = "2")
# cat('gamma:')
# print(gamma)
# cat('Gamma_matrix')
# print(Gamma_matrix)
# cat('t:')
# print(t)
text <- sprintf("Iteration %d: r2: %.6f s2: %.6f eta: %.6f rho: %.6f", iter_i, r2, s2,g_eta,rho)
cat(text, "\n", file = output_file_gamma, append = TRUE)
print(paste('r2:', r2, 's2:',s2))
if (r2  < res_tol && s2 < res_tol) {
cat("Gamma Converged: Primal and dual residuals are within tolerance\n")
break
}
# eta <- min(eta * 1.1, 1e-2)
# rho <- max(rho * 0.9, 1)
}
coef2 = gamma
# while(r2>=eps4 || s2>=eps5) {
# ## Update gamma
#   gamma = -ell_gradient_gamma(Gamma_matrix, data, Alpha_matrix) + rho*(gamma-t+u)
#   Gamma_matrix = matrix(gamma,R,K)
# ## Update t
#   t_old=t
#   t  =  gradient_omega3(t, N=1, lambda=lambda.gamma, K, R) - rho*(gamma-t+u)
#
# ## Update u
#   u= u + rho*(gamma-t)
# ##Calculate residuals
#   r2 = norm((gamma-t), type = "2")
#   s2 =  rho * norm((t-t_old), type = "2")
#
#
#   cat('gamma:')
#   print(gamma)
#   cat('Gamma_matrix')
#   print(Gamma_matrix)
#   cat('t:')
#   print(t)
#   print(paste('r2:', r2, 's2:',s2))
# }
###############Modified Step 4
# ###############ORIGINAAAAALLLLLLLLLLLLLLLLLLLLLLLLLL # Step 4
# data <- cbind(data,as.matrix(data[, cols]) %*% Alpha) #multiply predictors(nxp matrix) with Alpha(pxR) and add the R columns to data
# # give informative column names
# AlphaX.R <- paste("AlphaX",as.character(1:R),sep="")
# names(data)[((ncd+1):(ncd+R))] <- AlphaX.R #change names of r added columns
# attr(data, "trans") <- trans
# class(data) <- c("msdata", "data.frame")
#
# # expand covariates (copy K number of times)
#
# data <- expand.covs(data,AlphaX.R) #add new columns where number is put at index of outcome and zeros o everywhere else
#
# AlphaX.RK <- names(data)[((ncd+R+1):(ncd+R+R*K))] #store names of added columns
#
# # the expanded covariates are the predictors of the next model, to estimate Gamma-hat
# x <- as.matrix(data[colnames(data) %in% AlphaX.RK]) #stores the added columns of data
#
# ty <- as.matrix(data[colnames(data) %in% c("Tstart", "Tstop", "status")])
# yss <- Surv(ty[,1], ty[,2], ty[,3]) #creates a vector with (tstart,tstop) and a + if status==0
# yss.s <- stratifySurv(yss, data$trans) #data grouped according to the levels of data$trans
#
# fit2 <- glmnet(x, yss.s, family = "cox", standardize = standardize.opt,
#                lambda = lambda.gamma, trace.it = T, thresh = thresh, maxit = maxit, alpha = alpha)
#
# # obtain coefficients Gamma-hat (RKx1 vector)
# coef2 <- predict(fit2, type = "coefficients", x = x, y = yss)
# # structure in correct dimensions
# Gamma <- t(matrix(coef2[1:(K*R)],K,R)) #convert to RxK matrix
#
# # get value objective function on data
# Beta <- Alpha %*% Gamma
# ###############ORIGINAAAAALLLLLLLLLLLLLLLLLLLLLLLLLL
#
#
#calculate objective function
Alpha = matrix(a,p,R)
Gamma = matrix(gamma,R,K)
Beta <- Alpha %*% Gamma
cat('Gamma_matrix:')
print(Gamma)
cat('Alpha_matrix:')
print(Alpha)
cat('Beta_matrix:')
print(Beta)
# Step 5
logpl <- calculate.log.partial.lik(data=data, Beta=Beta, pred.names=pred.names)
obj.fun.train <- - 2 * logpl / nrow(data) + lambda.alpha * sum(abs(coef1)) + lambda.gamma * sum(abs(coef2))
#-PL(B)^(k+1)+lambda*p(A^(k+1))+lambda*p(G^(k+1)), where p() is the penalty--lasso
print(- 2 * logpl / nrow(data)) #-PL(B)^(k+1)
print(lambda.alpha * sum(abs(coef1))) #lambda*p(A^(k+1))
print(lambda.gamma * sum(abs(coef2))) #lambda*p(G^(k+1))
return(list(Alpha=Alpha, Gamma=Gamma,t=t,d=d,u1=u1,u2=u2, obj.fun.train=obj.fun.train))
}
################################################################################
# Calculate log partial likelihood
## Arguments ##
# dat: data, in mstate long format (e.g with transition matrix as attribute)
# Beta: estimated Beta matrix
# pred.names: names of predictors
calculate.log.partial.lik <- function(data, Beta, pred.names){
K <- ncol(Beta) # number of strata/outcomes
logliks.strata <- vector(length = K) #vector with FALSE , k length
for (trans in 1:K){
data.strata.subs <- data[data$trans == trans,] #select rows of data with trans==trans
expr_pred <- paste(pred.names, collapse = " + ") #formula:pred1+pred2+....+predn
beta_vec <- Beta[,trans] #column trans of Beta matrix
expr_mod <- paste("coxph(Surv(Tstart, Tstop, status) ~", expr_pred, ",
dat = data.strata.subs, init = beta_vec, control=list('iter.max'=0, timefix = F))") #creates expression(string)
mod <- eval(parse(text = expr_mod)) #EVAL:  evaluates this expression,parse(text = expr_mod) :converts the string into an R expression.
logliks.strata[trans] <- mod$loglik[[2]] #logik of model, Higher (less negative) values indicate a better fit-used for comparissons.
}
return(sum(logliks.strata))
}
# Using pen.admm.survrrr function with lambdas set to 0 (which is the same as fitting an unpenalized model)
r2_pen.admm.survrrr <- pen.admm.survrrr(formula,  R = nranks_fit, Gamma.iter = Gamma.iter, dat = dlong,
lambda.alpha = 0, lambda.gamma = 0, overall_eps = 1e-2, gd_tol = 1e-4, res_tol = 1e-3, maxit = 1e5, standardize.opt= F,rho=10, a_eta1=8.2e-4, a_eta2=1.7e-4,g_eta1=9e-3) #lambda: 5.685e-3
r2_pen.survrrr$obj.fun.train
Beta3 <- r2_pen.admm.survrrr$Alpha %*% r2_pen.admm.survrrr$Gamma
estimated_coefficients3 <- Beta3
true_coefficients3 <- Beta_matrix
mse3<- (estimated_coefficients3 - true_coefficients3)^2
mean(mse3)
mean(mse2) #0.000785664(2.9e-3) 0.0007675608(2.95e-3)0.000762934(2.959e-3) 0.000761184 (2.96e-3) 0.0007612089(2.961e-3)
Beta3
Beta2
r2_pen.survrrr$Alpha
r2_pen.admm.survrrr$Alpha
r2_pen.admm.survrrr$Gamma
r2_pen.survrrr$Gamma
## Call functions to simulate n_simulation=200 datasets using rank r=1 with half predictors be zeros
#set seed
set.seed(123)
#chose variables
n = 1000  # Number of observations500
p <- 8  # Number of covariates10
k <- 4 # Number of outcomes4
n_simulations = 1
r <- 2  # Rank of simulated data
datas_s2_1x = simulations_data(n,p,r,k,n_simulations,case = 2,corr = 0)
Beta_matrix = datas_s2_1x$Beta_matrix
datasau = datas_s2_1x
dlong <- datasau$dlong_list[[1]]
dlong=dlong[dlong$Tstop > dlong$Tstart, ]
#construct formula for the model
predictor_names <- grep("^x", names(dlong), value = TRUE)
formula_str <- paste("Surv(Tstop, status) ~", paste(predictor_names, collapse = " + "))
formula <- as.formula(formula_str)
redrank = formula
dat=datasau$dlong_list[[1]]
nranks_fit = r
Gamma.iter<-matrix(rnorm(nranks_fit*k),nranks_fit,k)
# Using original redrank function
r2 <- redrank(formula, data = dlong, R = nranks_fit)
# Using pen.survrrr function with lambdas set to 0 (which is the same as fitting an unpenalized model)
r2_pen.survrrr <- pen.survrrr(formula, dat = dlong, R = nranks_fit,
Gamma.iter = Gamma.iter, eps = 1e-5, lambda.alpha = 0, lambda.gamma =  0, standardize.opt = F)
# Using pen.admm.survrrr function with lambdas set to 0 (which is the same as fitting an unpenalized model)
r2_pen.admm.survrrr <- pen.admm.survrrr(formula,  R = nranks_fit, Gamma.iter = Gamma.iter, dat = dlong,
lambda.alpha = 0, lambda.gamma = 0, overall_eps = 1e-2, gd_tol = 1e-4, res_tol = 1e-3, maxit = 1e5, standardize.opt= F,rho=10, a_eta1=8.2e-4, a_eta2=1.7e-4,g_eta1=9e-3) #lambda: 5.685e-3
## Call functions to simulate n_simulation=200 datasets using rank r=1 with half predictors be zeros
#set seed
set.seed(123)
#chose variables
n = 500  # Number of observations500
p <- 8  # Number of covariates10
k <- 4 # Number of outcomes4
n_simulations = 1
r <- 2  # Rank of simulated data
datas_s2_1x = simulations_data(n,p,r,k,n_simulations,case = 2,corr = 0)
Beta_matrix = datas_s2_1x$Beta_matrix
datasau = datas_s2_1x
dlong <- datasau$dlong_list[[1]]
dlong=dlong[dlong$Tstop > dlong$Tstart, ]
#construct formula for the model
predictor_names <- grep("^x", names(dlong), value = TRUE)
formula_str <- paste("Surv(Tstop, status) ~", paste(predictor_names, collapse = " + "))
formula <- as.formula(formula_str)
redrank = formula
dat=datasau$dlong_list[[1]]
nranks_fit = r
Gamma.iter<-matrix(rnorm(nranks_fit*k),nranks_fit,k)
# Using pen.admm.survrrr function with lambdas set to 0 (which is the same as fitting an unpenalized model)
r2_pen.admm.survrrr <- pen.admm.survrrr(formula,  R = nranks_fit, Gamma.iter = Gamma.iter, dat = dlong,
lambda.alpha = 0, lambda.gamma = 0, overall_eps = 1e-2, gd_tol = 1e-4, res_tol = 1e-3, maxit = 1e5, standardize.opt= F,rho=10, a_eta1=8.2e-4, a_eta2=1.7e-4,g_eta1=9e-3) #lambda: 5.685e-3
# Using pen.admm.survrrr function with lambdas set to 0 (which is the same as fitting an unpenalized model)
r2_pen.admm.survrrr <- pen.admm.survrrr(formula,  R = nranks_fit, Gamma.iter = Gamma.iter, dat = dlong,
lambda.alpha = 0, lambda.gamma = 0, overall_eps = 1e-2, gd_tol = 1e-4, res_tol = 1e-3, maxit = 1e5, standardize.opt= F,rho=10, a_eta1=8.2e-5, a_eta2=1.7e-5,g_eta1=9e-3) #lambda: 5.685e-3
## Call functions to simulate n_simulation=200 datasets using rank r=1 with half predictors be zeros
#set seed
set.seed(123)
#chose variables
n = 200  # Number of observations500
p <- 8  # Number of covariates10
k <- 4 # Number of outcomes4
n_simulations = 1
r <- 2  # Rank of simulated data
datas_s2_1x = simulations_data(n,p,r,k,n_simulations,case = 2,corr = 0)
Beta_matrix = datas_s2_1x$Beta_matrix
datasau = datas_s2_1x
dlong <- datasau$dlong_list[[1]]
dlong=dlong[dlong$Tstop > dlong$Tstart, ]
#construct formula for the model
predictor_names <- grep("^x", names(dlong), value = TRUE)
formula_str <- paste("Surv(Tstop, status) ~", paste(predictor_names, collapse = " + "))
formula <- as.formula(formula_str)
redrank = formula
dat=datasau$dlong_list[[1]]
nranks_fit = r
Gamma.iter<-matrix(rnorm(nranks_fit*k),nranks_fit,k)
# Using pen.survrrr function with lambdas set to 0 (which is the same as fitting an unpenalized model)
r2_pen.survrrr <- pen.survrrr(formula, dat = dlong, R = nranks_fit,
Gamma.iter = Gamma.iter, eps = 1e-5, lambda.alpha = 0, lambda.gamma =  0, standardize.opt = F)
Beta2 <- r2_pen.survrrr$Alpha  %*% r2_pen.survrrr$Gamma
estimated_coefficients2 <- Beta2
true_coefficients2 <- Beta_matrix
mse2<- (estimated_coefficients2 - true_coefficients2)^2
mean(mse2) #0.000785664(2.9e-3) 0.0007675608(2.95e-3)0.000762934(2.959e-3) 0.000761184 (2.96e-3) 0.0007612089(2.961e-3)
Beta3 <- r2_pen.admm.survrrr$Alpha %*% r2_pen.admm.survrrr$Gamma
# Using original redrank function
r2 <- redrank(formula, data = dlong, R = nranks_fit)
Beta1 <- r2$Alpha %*% r2$Gamma
estimated_coefficients1 <- Beta1
true_coefficients1 <- Beta_matrix
mse1<- (estimated_coefficients1 - true_coefficients1)^2
mean(mse1)
# Using pen.admm.survrrr function with lambdas set to 0 (which is the same as fitting an unpenalized model)
r2_pen.admm.survrrr <- pen.admm.survrrr(formula,  R = nranks_fit, Gamma.iter = Gamma.iter, dat = dlong,
lambda.alpha = 0, lambda.gamma = 0, overall_eps = 1e-2, gd_tol = 1e-4, res_tol = 1e-3, maxit = 1e5, standardize.opt= F,rho=10, a_eta1=8.2e-5, a_eta2=1.7e-5,g_eta1=9e-3) #lambda: 5.685e-3
# Using pen.admm.survrrr function with lambdas set to 0 (which is the same as fitting an unpenalized model)
r2_pen.admm.survrrr <- pen.admm.survrrr(formula,  R = nranks_fit, Gamma.iter = Gamma.iter, dat = dlong,
lambda.alpha = 0, lambda.gamma = 0, overall_eps = 1e-2, gd_tol = 1e-4, res_tol = 1e-3, maxit = 1e5, standardize.opt= F,rho=10, a_eta1=8.2e-4, a_eta2=1.7e-4,g_eta1=9e-3) #lambda: 5.685e-3
# Using pen.admm.survrrr function with lambdas set to 0 (which is the same as fitting an unpenalized model)
r2_pen.admm.survrrr <- pen.admm.survrrr(formula,  R = nranks_fit, Gamma.iter = Gamma.iter, dat = dlong,
lambda.alpha = 0, lambda.gamma = 0, overall_eps = 1e-2, gd_tol = 1e-4, res_tol = 1e-3, maxit = 1e5, standardize.opt= F,rho=10, a_eta1=8.2e-5, a_eta2=1.7e-5,g_eta1=9e-3) #lambda: 5.685e-3
# Using pen.admm.survrrr function with lambdas set to 0 (which is the same as fitting an unpenalized model)
r2_pen.admm.survrrr <- pen.admm.survrrr(formula,  R = nranks_fit, Gamma.iter = Gamma.iter, dat = dlong,
lambda.alpha = 0, lambda.gamma = 0, overall_eps = 1e-2, gd_tol = 1e-4, res_tol = 1e-3, maxit = 1e5, standardize.opt= F,rho=10, a_eta1=2e-4, a_eta2=9e-3,g_eta1=9e-3) #lambda: 5.685e-3
